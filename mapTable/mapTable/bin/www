#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('maptable:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create HTTP server.
 */

var wss = require('./wss.js');

wss.createWss(server)

var testData = require('../testData/carlist.js').carlist
setInterval(function() {
    var msg = {
        type: "carChange",
        result: testDo(testData)
    }
    wss.broadcast(JSON.stringify(msg))
}, 3000)

function testDo(data) {
    for (var i in data) {
        var temp = data[i].location
        var x = 0.0002 * Math.floor(Math.random() * 10) * (Math.random() > 0.5 ? -1 : 1)
        var y = 0.0002 * Math.floor(Math.random() * 10) * (Math.random() > 0.5 ? -1 : 1)
        temp.lng = parseFloat(temp.lng) + x
        temp.lat = parseFloat(temp.lat) + y
        // console.log(x + ':::' + y)
        data[i].location.lng = String(temp.lng)
        data[i].location.lat = String(temp.lat)
    }
    return data
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is  already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}